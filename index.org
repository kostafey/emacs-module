# -*- org-confirm-babel-evaluate: nil; after-save-hook: tangle-and-export; org-export-in-background: t; -*-
#+OPTIONS: toc:nil num:3 H:4 ^:nil pri:t

#+HTML_HEAD: <link href="https://fonts.googleapis.com/css?family=Cabin+Sketch" rel="stylesheet">
#+HTML_HEAD:  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/css/materialize.min.css">
#+HTML:  <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/js/materialize.min.js"></script>
#+HTML: <style> h1, h2, h3, h4 { font-family: 'Cabin Sketch', cursive; } </style>

#+TITLE: Writing Emacs modules with Go

#+EMAIL: mike.rosset@gmail.com

* Introduction
:PROPERTIES:
:HTML_CONTAINER_CLASS: container
:END:
As of Emacs version ~25.1~ Emacs is able to load dynamic modules. And as of
version ~1.5~ Go supports building packages as dynamice shared libraries.

This means in theory we can write Emacs elisp modules in pure Go.

We'll create a minimal Emacs C module, and then a Emacs module in Go.

some data here

* Minimal Emacs module in C
:PROPERTIES:
:HTML_CONTAINER_CLASS: container
:END:
We'll start by writing a basic Emacs module in C.

First we'll create a top level directory and then ~cd~ into that directory.
#+BEGIN_SRC shell
mkdir -pv ~/src/emacs-module
cd ~/src/emacs-module
#+END_SRC

From here on any commands we run, will be from our top-level directory. in this
case =~/src/emacs-module=
To compile a Emacs modules we need the ~emacs-module.h~ header file. The header
file is found in the ~src~ directory of the Emacs source tarball. It's possible your
OS provides this already. However this guide is OS agnostic and we'll assume
that the header file has not been installed.

Download the emacs source tarball.
#+BEGIN_SRC shell :results silent
wget -c https://mirrors.kernel.org/gnu/emacs/emacs-25.2.tar.gz
#+END_SRC

And then extract it.
#+BEGIN_SRC shell :results silent
tar xf emacs-25.2.tar.gz
#+END_SRC

Create the src directory
#+BEGIN_SRC shell :results silent
mkdir src
#+END_SRC

** src/cmodule.c
Edit ~src/cmodule.c~

#+INCLUDE: src/cmodule.c src C

First we include ~emacs-module.h~ header file.
declartion that we'll need.
#+BEGIN_SRC C :main no :tangle src/cmodule.c
#include <emacs-module.h>
#include <stdio.h>

#define CMOD_VERSION  "0.1"
#+END_SRC

Emacs requires ~plugin_is_GPL_compatible~ symbol, if not declared the module
will not be loaded.
#+BEGIN_SRC C :main no :tangle src/cmodule.c
int plugin_is_GPL_compatible;
#+END_SRC

This will be the function that be called by Emacs once we have registered it.
Then function
#+BEGIN_SRC C :main no :tangle src/cmodule.c
static emacs_value
Fcmodule_glibc_version (emacs_env *env, int nargs, emacs_value args[], void *data)
{
emacs_value message = env->intern(env, "message");
emacs_value *string = env->make_string(env, CMOD_VERSION, 3);
env->funcall(env, message, 1, CMOD_VERSION);
return string;
}
#+END_SRC

This function is the entry point of our module and is run when the module is first
loaded by Emacs.
#+BEGIN_SRC C :main no :tangle src/cmodule.c
extern int emacs_module_init(struct emacs_runtime *ert)
{
#+END_SRC

Next we need to provision the module. We'll call the elisp ~(provide)~ function
through the C interface. If not Emacs will error with feature not provided.

First we get the Emacs environment from the Emacs run-time.
#+BEGIN_SRC C -p :main no :tangle src/cmodule.c
  emacs_env *env = ert->get_environment(ert);
#+END_SRC

Then we convert our feature string into a qouted lisp symbol. The nameing is important
our module is cmodule.so so the feature symbol *must* be named ~cmodule~,
anything else will not work. Then we get a quoted symbol for the elisp provide function.

#+BEGIN_SRC C -p :main no :tangle src/cmodule.c
  emacs_value Qfeat = env->intern (env, "cmodule");
  emacs_value Qprovide = env->intern (env, "provide");
#+END_SRC


We then create an arguements array containing our feature symbol. And have the
Emacs environment call the provides function with our agruement. We also let
funcall know that we are passing one argument.

#+BEGIN_SRC C :main no :tangle src/cmodule.c
  emacs_value pargs[] = { Qfeat };
  env->funcall (env, Qprovide, 1, pargs);
#+END_SRC

#+BEGIN_SRC C :main no :tangle src/cmodule.c
  printf("%s\n", CMOD_VERSION);
  return 0;
}
#+END_SRC

#+RESULTS:

** Compiling the module
Create a lib directory to hold our shared libraries.
#+BEGIN_SRC shell :results silent
mkdir lib
#+END_SRC

Now compile ~cmodule.c~ as a shared C library.
#+BEGIN_SRC shell :results silent
gcc -I emacs-25.2/src -fPIC -shared src/cmodule.c -o lib/cmodule.so
#+END_SRC

** Using our C module with Emacs.
To test our module we'll start Emacs in batch mode then call our custom function.
#+BEGIN_SRC shell :exports both -p
  emacs -Q -L ./lib -batch --eval "(require 'cmodule)"
#+END_SRC

#+RESULTS:
: 0.1
